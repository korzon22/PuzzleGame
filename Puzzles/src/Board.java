import java.awt.geom.Area;import java.awt.geom.Rectangle2D;import java.util.ArrayList;public class Board extends Area {    double xStart, yStart;    double xEnd, yEnd;    int noOfRowsColumns;    double puzzleSize;    public ArrayList<SinglePuzzle> listOfPuzzles = new ArrayList<>();    public ArrayList<SingleImage> listOfImages = new ArrayList<>();    public ArrayList<Rectangle2D> listOfRectangles = new ArrayList<>();    Board(int xS, int yS, int xE, int yE, int nR) {        xStart = xS;        yStart = yS;        xEnd = xE;        yEnd = yE;        noOfRowsColumns = nR;        puzzleSize = 100;    }    //this method creates puzzles!!!    void createPuzzles() {        //puzzles - ORIGINAL-need to shift all        listOfPuzzles.add(new PuzzleTopLeftCorner(100, 100, 100, 100));        listOfPuzzles.add(new PuzzleTopRowEven(200, 100, 100, 100));        listOfPuzzles.add(new PuzzleTopRowOdd(300, 100, 100, 100));        listOfPuzzles.add(new PuzzleTopRowEven(400, 100, 100, 100));        listOfPuzzles.add(new PuzzleTopRightCorner(500, 100, 100, 100));        listOfPuzzles.add(new PuzzleLeftEven(100, 200, 100, 100));        listOfPuzzles.add(new PuzzleLeftOdd(100, 300, 100, 100));        listOfPuzzles.add(new PuzzleLeftEven(100, 400, 100, 100));        listOfPuzzles.add(new PuzzleRightEven(500, 200, 100, 100));        listOfPuzzles.add(new PuzzleRightOdd(500, 300, 100, 100));        listOfPuzzles.add(new PuzzleRightEven(500, 400, 100, 100));        listOfPuzzles.add(new PuzzleEvenEven(200, 200, 100, 100));        listOfPuzzles.add(new PuzzleEvenEven(400, 200, 100, 100));        listOfPuzzles.add(new PuzzleEvenEven(200, 400, 100, 100));        listOfPuzzles.add(new PuzzleEvenEven(400, 400, 100, 100));        listOfPuzzles.add(new PuzzleOddEven(300, 200, 100, 100));        listOfPuzzles.add(new PuzzleOddEven(200, 300, 100, 100));        listOfPuzzles.add(new PuzzleOddEven(400, 300, 100, 100));        listOfPuzzles.add(new PuzzleOddEven(300, 400, 100, 100));        listOfPuzzles.add(new PuzzleEvenEven(300, 300, 100, 100));        listOfPuzzles.add(new PuzzleBottomLeftCorner(100, 500, 100, 100));        listOfPuzzles.add(new PuzzleBottomRowEven(200, 500, 100, 100));        listOfPuzzles.add(new PuzzleBottomRowOdd(300, 500, 100, 100));        listOfPuzzles.add(new PuzzleBottomRowEven(400, 500, 100, 100));        listOfPuzzles.add(new PuzzleBottomRightCorner(500, 500, 100, 100));    }    //this method creates images!!!    void createImages(String f) {        listOfImages.add(new SingleImageExtended(50, 50, f));        listOfImages.add(new SingleImageExtended(150, 50, f));        listOfImages.add(new SingleImageExtended(250, 50, f));        listOfImages.add(new SingleImageExtended(350, 50, f));        listOfImages.add(new SingleImageExtended(450, 50, f));        listOfImages.add(new SingleImageExtended(50, 150, f));        listOfImages.add(new SingleImageExtended(50, 250, f));        listOfImages.add(new SingleImageExtended(50, 350, f));        listOfImages.add(new SingleImageExtended(450, 150, f));        listOfImages.add(new SingleImageExtended(450, 250, f));        listOfImages.add(new SingleImageExtended(450, 350, f));        listOfImages.add(new SingleImageExtended(150, 150, f));        listOfImages.add(new SingleImageExtended(350, 150, f));        listOfImages.add(new SingleImageExtended(150, 350, f));        listOfImages.add(new SingleImageExtended(350, 350, f));        listOfImages.add(new SingleImageExtended(250, 150, f));        listOfImages.add(new SingleImageExtended(150, 250, f));        listOfImages.add(new SingleImageExtended(350, 250, f));        listOfImages.add(new SingleImageExtended(250, 350, f));        listOfImages.add(new SingleImageExtended(250, 250, f));        listOfImages.add(new SingleImageExtended(50, 450, f));        listOfImages.add(new SingleImageExtended(150, 450, f));        listOfImages.add(new SingleImageExtended(250, 450, f));        listOfImages.add(new SingleImageExtended(350, 450, f));        listOfImages.add(new SingleImageExtended(450, 450, f));    }    void makeMess() {        for (int i = 0; i < listOfPuzzles.size(); i++) {            double xR = (Math.random() * 300) + 500;            double yR = (Math.random() * 50);            int rRotation = (int) ((Math.random() * 4) + 1);            listOfPuzzles.get(i).setPosition(xR, yR);            double x = listOfPuzzles.get(i).originalX;            double y = listOfPuzzles.get(i).originalY;            listOfPuzzles.get(i).setPuzzleRotation(x + 50, y + 50, rRotation);            listOfImages.get(i).setImageRotation(rRotation);        }    }    void createGrid(double startingX, double startingY, int gridSize) {        for (int i = 0; i < gridSize; i++) {            for (int j = 0; j < gridSize; j++) {                listOfRectangles.add(new Rectangle2D.Double(startingX, startingY, 100, 100));                startingX = startingX + 100;            }            startingX = 100;            startingY = startingY + 100;        }    }    boolean isSetFinished(){        for (int i=0; i<listOfPuzzles.size(); i++){            if ((!listOfPuzzles.get(i).isPositionOriginal()) || (listOfPuzzles.get(i).incRotation%4!=0)) return false;        }        return true;    }}